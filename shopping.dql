
# Create Environment, Domain and Context

create environment 'develop-0.0.1';

create domain 'e-commerce' using environment 'develop-0.0.1';
create context 'shopping' for domain 'e-commerce' using environment 'develop-0.0.1';

# Using Environment, Domain and Context

using environment 'develop-0.0.1';
for domain 'e-commerce';
in context 'shopping';

create aggregate 'carts' (shopper_id, product_count, is_created, is_checked_out)
	as (identifier, integer, boolean, boolean) 
	defaults (null, 0, false, false)
;

within aggregate 'carts';

create index 'products';

# Events

create event 'empty';
create event 'full';

create event 'created' (shopper_id) as (identifier) handled by (
	<:
		update aggregate
			set 'is_created' = true
	:>
);

create event 'checked-out' handled by (
	<:
		update aggregate
			set 'is_checked_out' = true
	:>
);

create event 'product-added' (product) as (entity\product) handled by (
	<:
		update aggregate
			increment 'product_count'
			add to index 'products' (product.id)
	:>
);

create event 'product-quantity-changed' (product_id, quantity) as (identifier, value\quantity);

create event 'product-removed' (product_id) as (identifier) handled by (
	<:
		update aggregate
			decrement 'product_count'
			remove product.id from index 'products'
	:>
);

# Invariants

create invariant 'created' satisfied by (
	<:
		from aggregate
		check is_created == true
	:>
);

create invariant 'checked-out' satisfied by (
	<:
		from aggregate
		check is_checked_out == true
	:>
);

create invariant 'empty' satisfied by (
	<:
		from aggregate
		check product_count == 0
	:>
);

create invariant 'full' satisfied by (
	<:
		from aggregate
		check product_count == 10
	:>
);

create invariant 'product-exists' (product_id) as (identifier) satisfied by (
	<:
		from aggregate
		check exists in index 'products' (product_id)
	:>
);

create invariant 'has-one-cart' (shopper_id) as (identifier) satisfied by (
	<:
		from all
			count as cart_count
		where shopper_id = shopper_id
			and is_created = true
			and is_checked_out = true
		check cart_count > 0
	:>
);

# Commands

create command 'create' (shopper_id) as (identifier) handled by (
	<{
		assert invariant not 'created';
		assert invariant 'has-one-cart' (command.shopper_id);

		apply event 'created' (command.shopper_id); 
		apply event 'empty';
	}>
);

create command 'add-product' (product) as (entity\product) handled by (
	<{
		assert invariant not 'checked-out';
		assert invariant not 'full';
		assert invariant not 'product-exists' (command.product.id);

		apply event 'product-added' (command.product);
		apply event 'full' assuming invariant 'full';
	}>
);

create command 'change-product-quantity' (product_id, quantity) as (identifier, value\quantity) handled by (
	<{
		assert invariant not 'checked-out';
		assert invariant 'product-exists' (command.product_id); 

		apply event 'product-quantity-changed' (command.product_id, command.quantity); 
	}>
);

create command 'remove-product' (product_id) as (identifier) handled by (
	<{
		assert invariant not 'checked-out';
		assert invariant 'product-exists' (command.product_id);

		apply event 'product-removed' (command.product_id);

		apply event 'empty' assuming invariant 'empty';
	}>
);

create command 'checkout' handled by (
	<{
		apply event 'checked-out' assuming invariant not 'checked-out';
	}>
);




