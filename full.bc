<# 

#
# Domain and Context definitions.
#

create domain 'ecommerce';
create context 'shopping' in 'ecommerce';

#
# Value, Entity and Aggregate definitions.
#

in context 'shopping'
{
	create value 'quantity' single with validators(
		greater-than(0), 
		less-than (100)
	);

	create value 'products' index;

	create entity 'cart' (identifier id, identifier member_id);
	create entity 'product' (identifier id, value\quantity quantity);

	create aggregate 'cart';
};

#
# Event, Command and State definitions.
#

in context 'shopping' in aggregate 'cart'
{
	create event 'created';
	create event 'empty';
	create event 'full';
	create event 'checked-out';

	create event 'product-added' (entity\product product);
	create event 'product-quantity-changed' (entity\product product);
	create event 'product-removed' (identifier product_id);

	create command 'create' (entity\cart cart);
	create command 'checkout' (identifier cart_id);

	create command 'add-product' (identifier cart_id, entity\product product);
	create command 'change-product-quantity' (identifier cart_id, entity\product product);
	create command 'remove-product' (identifier cart_id, identifier product_id);

	create state 'state' (
		boolean is_created, 
		boolean is_checked_out, 
		entity\cart cart, 
		value\products products
	) defaults ( false, false, null, new value\products);
};

#
# State Event handlers.
#

in context 'shopping' in aggregate 'cart' in state 'state'
{
	add handler when event\created
	{
		is_created = true;
	};

	add handler when event\product-added
	{
		products->add(event->product);
	};

	add handler when event\product-quantity-changed
	{
		products->replace(event->product);
	};

	add handler when event\product-removed
	{
		products->remove(event->product_id);
	};

	add handler when event\checked-out
	{
		is_checked_out = true;
	};
};

#
# Invariant definitions.
#

in context 'shopping' in aggregate 'cart'
{
	create invariant 'created' (cart\state state)
	{
		state->is_created == true;
	};

	create invariant 'empty' (cart\state state)
	{
		state->products->count == 0;
	};

	create invariant 'full' (cart\state state)
	{
		state->products->count >= 10;
	};

	create invariant 'checked-out' (cart\state state)
	{
		state->products->count >= 10;
	};

	create invariant 'product-exists' (cart\state state, identity product_id)
	{
		state->products->exists(product_id);
	};
};

#
# A 'has_active_cart' Invariant backed by a projection.
#

in context 'shopping' in aggregate 'cart'
{
	create projection 'active-carts' (identifier id, identifier member_id)
	{
		add handler when event\created
		{
			insert into 'active-carts' (id, member_id) 
				values (cart->id, cart->member_id)
			;
		};

		add handler when event\checked-out'
		{
			delete from 'active-carts' where 'id' = cart_id;
		};
	};

	create invariant 'has_active_cart' (identifier member_id)
	{
		cart_count = count from 'active-carts' where id = member_id;

		return cart_count > 0;
	};
};

#
# Aggregate Command handlers.
#

in context 'shopping' in aggregate 'cart'
{
	add handler when command\create
	{
		assert not invariant\created;
		assert invariant\has_active_cart (command->cart->member_id);

		apply event\created (command->cart);
		apply event\empty;
	};

	add handler when command\checkout
	{
		assert not invariant\checked-out;

		apply event\checkout;
	};

	add handler when command\add-product
	{
		assert not invariant\checked-out;
		assert not invariant\full;
		assert not invariant\product-exists ( command->product->id );

		apply event\product-added ( command->product );

		check invariant\full then
		{
			apply event\full;
		};
	};

	add handler when command\change-product-quantity
	{
		assert not invariant\checked-out;
		assert invariant\product-exists ( command->product->id );

		apply event\product-quantity-changed ( command->product );
	};

	add handler when command\remove-product
	{
		assert not invariant\checked-out;
		assert invariant\product-exists ( command->product->id );

		apply event\product-removed ( command->product->id );

		check invariant\empty then
		{
			apply event\empty;
		};
	};
};

#>
